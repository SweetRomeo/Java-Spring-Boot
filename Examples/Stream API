Example - 001
import java.util.*;

public class Main {
    public static void main(String[] args)  {

        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        int sum = 0;
        for (int n : numbers) {
            if (n % 2 == 0) {
                n *= 2;
                sum += n;
            }
        }

        numbers.forEach(n -> System.out.print(n + " "));
    }
}

Example - 002

import java.util.*;
import java.util.stream.Stream;

public class Main {
    public static void main(String[] args)  {

        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        Stream<Integer> s1 = numbers.stream();
        Stream<Integer> s2 = s1.filter(number -> number % 2 == 0);
        Stream<Integer> s3 = s2.map(n -> n * 2);
        int result = s3.reduce(0, (x, y) -> x + y);

        s3.forEach(System.out::println); //n -> System.out.println(n)
        System.out.println(result); //Streamleri ikinciye kullanımda exception fırlatılır.
    }
}

Example - 003
Parallel Streamin ne kadar fark ettiğini anlatan bir örnek:

import java.util.*;
import java.util.stream.Stream;

public class Main {
    public static void main(String[] args)  {

        int size = 10_000;
        List<Integer> nums = new ArrayList<>(10000);

        Random rand = new Random();

        for (int i = 0; i < size; i++) {
            nums.add(rand.nextInt(100));
        }

        long startSeq = System.currentTimeMillis();
        int sum2 = nums.stream().map(i ->
        {
            try {
                Thread.sleep(1);
            }
            catch (InterruptedException e) {
                System.out.println("Exception caught: " + e);
            }
            return i * 2;
        }).mapToInt(i -> i).sum();
        long endSeq = System.currentTimeMillis();

        long startPara = System.currentTimeMillis();
        int sum3 = nums.parallelStream().map(i -> {
            try {
                Thread.sleep(1);
            }
            catch (InterruptedException e) {
                System.out.println("Exception caught: " + e);
            }
            return i * 2;
        }).mapToInt(i -> i).sum();
        long endPara = System.currentTimeMillis();

        System.out.println(sum2 + " " + sum3);
        System.out.println("Seq : " + (endSeq - startSeq));
        System.out.println("Para : " + (endPara - startPara));
    }
}

Example-004
Optional eğer uygun elemanı bulamazsa ve get fonksiyonu çağrılırsa bu durumda
NoSuchElement isimli bir exception throw edilir. Optionalın bir alternatifi 
.orElse methodudur.
import java.util.*;
import java.util.stream.Stream;

public class Main {
    public static void main(String[] args)  {

        List<String> names = Arrays.asList("John", "Laxmi", "Navin", "Jill");

        Optional<String> name = names.stream()
                .filter(str -> str.contains("x"))
                .findFirst();
        /* String name = names.stream()
                .filter(str -> str.contains("x"))
                .findFirst()
                .orElse("NotFound");
        */
        System.out.println(name.get());
    }
}
