Sıralama Algoritmaları
- Selection Sort Algoritması
- Insertion Sort
- Merge Sort
- Bubble Sort

Singleton Sınıfının genel yapısı:
- Bu sınıfta default constructor private olmalıdır. Bunun amacı her seferinde 
nesne üretilmemesi eğer nesnenin içi dolu ise ctor çağrılmamasını sağlar.
- Burada ctoru çağıran metot bir static metot olup genellikle ismi getInstance olur. Bu 
metot nesnenin yaratılıp yaratılmadığını kontrol ederek nesne yaratılmamış ise ctor çağrısını 
yapar. 
- Bu sınıfın en önemli özelliği statix metot çağrısı üzerinden nesne yaratılması ve hali hazırda bir nesne 
varsa yeni bir nesne oluşturulmaması bununla birlikte yapılacak olan bellek tasarufu.
Bazı Singleton Sınıf Örnekleri:
Örn 1:
// Singleton Class
public class Singleton {
    // Sınıfın tek örneği
    private static Singleton instance;

    // Private constructor, böylece dışarıdan nesne oluşturulamaz
    private Singleton() {
        System.out.println("Singleton instance created!");
    }

    // Tek örneği döndüren yöntem
    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }

    // Örnek bir metod
    public void showMessage() {
        System.out.println("Singleton Instance Method Invoked!");
    }
}

public class Main {
    public static void main(String[] args) {
        // Singleton sınıfını kullanma
        Singleton singleton1 = Singleton.getInstance();
        singleton1.showMessage();

        Singleton singleton2 = Singleton.getInstance();
        System.out.println(singleton1 == singleton2); // true
    }
}

Örn 2:
public class LogManager {
    private static LogManager instance;
    
    private LogManager() {
        System.out.println("LogManager instance created!");
    }
    
    public static LogManager getInstance() {
        if (instance == null) {
            instance = new LogManager();
        }
        return instance;
    }
    
    public void log(String message) {
        System.out.println("Log: " + message);
    }
}

public class Game {
    public static void main(String[] args) {
        LogManager logger = LogManager.getInstance();
        logger.log("Player has started the game.");
        logger.log("Player collected a treasure.");
    }
}
Örn 3:

import java.util.HashMap;
import java.util.Map;

public class ConfigManager {
    private final Map<String, String> configs = new HashMap<String, String>();
    private static ConfigManager instance;
    private ConfigManager() {
        System.out.println("ConfigManager Constructor");
    }
    public static ConfigManager getInstance() {
        return instance == null ? instance = new ConfigManager() : instance;
    }

    public String getSettings(String key) {
        return configs.get(key);
    }

    public void setSettings(String key, String value) {
        configs.put(key, value);
    }

    public void printSettings() {
        for (Map.Entry<String, String> entry : configs.entrySet()) {
            System.out.println(entry.getKey() + " = " + entry.getValue());
        }
    }
}
class App {
    public static void main(String[] args) {
        ConfigManager configManager = ConfigManager.getInstance();
        configManager.setSettings("19937", "Burcu");
        configManager.setSettings("19938", "Berke");
        configManager.printSettings();
    }
}
Singleton sınıfının implementasyon formları:
1-) Eager initialization: nesne yaratımı static veri elemanının tanımı sırasında yapılır. Bu nesnenin 
final olması siddetle tavsiye edilir. Kısaca ctor bir metot içerisinde değil doğrudan static veri elemanı tanımı sırasında çağrılır.
Örnek:
package com.journaldev.singleton;

public class EagerInitializedSingleton {

    private static final EagerInitializedSingleton instance = new EagerInitializedSingleton();

    // private constructor to avoid client applications using the constructor
    private EagerInitializedSingleton(){}

    public static EagerInitializedSingleton getInstance() {
        return instance;
    }
}

2-) Static block initialization: Nesne yaratımı(ctor çağrısı) static metot veya veri elemanı içerisinde değil doğrudan static blok içerisinde yapılıyorsa 
Buna static block init. adı verilir. 
Örnek:
package com.journaldev.singleton;

public class StaticBlockSingleton {

    private static StaticBlockSingleton instance;

    private StaticBlockSingleton(){}

    // static block initialization for exception handling
    static {
        try {
            instance = new StaticBlockSingleton();
        } catch (Exception e) {
            throw new RuntimeException("Exception occurred in creating singleton instance");
        }
    }

    public static StaticBlockSingleton getInstance() {
        return instance;
    }
}

3-) Lazy initialization: Bu formda nesne static metot içerisinde yaratılır ve nesnenin boş olup 
olmadığı kontrol edilir. Şüphesiz getInstance metodu çağrılmadığı sürece nesne yaratımı olmaz.
Örnek:
package com.journaldev.singleton;

public class LazyInitializedSingleton {

    private static LazyInitializedSingleton instance;

    private LazyInitializedSingleton(){}

    public static LazyInitializedSingleton getInstance() {
        if (instance == null) {
            instance = new LazyInitializedSingleton();
        }
        return instance;
  }
}  

4-) Thread Safe Singleton
Nesnenin yaratıldığı sınıfın static metodu synchronized anahtar sözcüğü ile birlikte 
yazılır. Bu sayede sadece maksimum bir tane thread içerisinde bu metot çağrılabilir. Bu
da bu sınıf nesnesiyle thread safe bir şekilde çalışılmasına imkan verir.
Örnek:
package com.journaldev.singleton;

public class ThreadSafeSingleton {

    private static ThreadSafeSingleton instance;

    private ThreadSafeSingleton(){}

    public static synchronized ThreadSafeSingleton getInstance() {
        if (instance == null) {
            instance = new ThreadSafeSingleton();
        }
        return instance;
    }
}
//--------------------------------------------------------------------------


String sınıfı:
- String bir temel tür(Primitive type) değildir. 
- String türünden bir nesneye new operatörü kullanılarak atama yapılabilir. Ancak doğrudan yazı karakteri
atamak ile bunun arasında herhangi bir fark yoktur.
- String sınıfı immutable bir sınıftır.
- String C++ ta olduğu gibi == operatörü ile karşılaştırılamaz. Çünkü bu yazı içeriklerini değil bellek adreslerini karşılaştırır.
String Builder ve String Buffer sınıfları:
- Bu sınıfları String sınıfının aksine Mutable(değiştirilebilir) özellik gösterirler.
- Bu sınıfların yazı kapasitesini veren capacity fonksiyonu mevcuttur.
- Bu sınıfların String sınıfında olmayan append metotları da mevcuttur.
- Bu sınfların karakterlerin tamamını silen delete metodları da mevcuttur.
- String Buffer Thread safe iken String Builder Thread safe değildir.
Static Block
- bu block içerisinde yalnızca sınıfın static veri elemanları tanımlanabilir. 
- non-static veri elemanlarının tanımlanması durumunda error oluşur.
- static block nesne yaratımı olduğu takdirde ctordan bile önce çağrılır.
- 100 tane nesne yaratıldığında ctor 100 defa çağrılır ancak static block sadece bir kere çağrılır.
Wrapper Class
- Sarmayalan sınıflar temel türlerden gelen değerleri sarmalarlar. Bu işlemler temel türlerin tek başına 
yapamadığı içleri sarmalayan sınıf yardımıyla yapabilmesi içindir.
Abstract Anahtar Sözcüğü
- Abstract metotların gövdeleri yoktur. Bu sebeple türemiş sınıflarından herhangi birinde mutlaka tanımlanmaları gerekmektedir.
- Abstract metotlar yalnızca abstract sınıfların içerisinde yer alabilirler.
- Abstract sınıflardan new operatörüyle nesne yaratımı geçersizdir.
- Abstract sınıflar içerisinde hem abstract hem abstract olmayan metotlar yer alabilir.
- Tasarımda abstract metotlara sahip olan sınıflar her zaman bir türemiş sınıfı(Derived-Sub-Child class) mevcut olmalıdır. Ayrıca bu türemiş sınıf 
Inner Class
- Inner classlarda nesne yaratığı doğrudan yapılamaz.
- 
