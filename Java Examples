Sıralama Algoritmaları
- Selection Sort Algoritması
- Insertion Sort
- Merge Sort
- Bubble Sort

Singleton Sınıfının genel yapısı:
- Bu sınıfta default constructor private olmalıdır. Bunun amacı her seferinde 
nesne üretilmemesi eğer nesnenin içi dolu ise ctor çağrılmamasını sağlar.
- Burada ctoru çağıran metot bir static metot olup genellikle ismi getInstance olur. Bu 
metot nesnenin yaratılıp yaratılmadığını kontrol ederek nesne yaratılmamış ise ctor çağrısını 
yapar. 
- Bu sınıfın en önemli özelliği statix metot çağrısı üzerinden nesne yaratılması ve hali hazırda bir nesne 
varsa yeni bir nesne oluşturulmaması bununla birlikte yapılacak olan bellek tasarufu.
Bazı Singleton Sınıf Örnekleri:
Örn 1:
// Singleton Class
public class Singleton {
    // Sınıfın tek örneği
    private static Singleton instance;

    // Private constructor, böylece dışarıdan nesne oluşturulamaz
    private Singleton() {
        System.out.println("Singleton instance created!");
    }

    // Tek örneği döndüren yöntem
    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }

    // Örnek bir metod
    public void showMessage() {
        System.out.println("Singleton Instance Method Invoked!");
    }
}

public class Main {
    public static void main(String[] args) {
        // Singleton sınıfını kullanma
        Singleton singleton1 = Singleton.getInstance();
        singleton1.showMessage();

        Singleton singleton2 = Singleton.getInstance();
        System.out.println(singleton1 == singleton2); // true
    }
}

Örn 2:
public class LogManager {
    private static LogManager instance;
    
    private LogManager() {
        System.out.println("LogManager instance created!");
    }
    
    public static LogManager getInstance() {
        if (instance == null) {
            instance = new LogManager();
        }
        return instance;
    }
    
    public void log(String message) {
        System.out.println("Log: " + message);
    }
}

public class Game {
    public static void main(String[] args) {
        LogManager logger = LogManager.getInstance();
        logger.log("Player has started the game.");
        logger.log("Player collected a treasure.");
    }
}
Örn 3:

import java.util.HashMap;
import java.util.Map;

public class ConfigManager {
    private final Map<String, String> configs = new HashMap<String, String>();
    private static ConfigManager instance;
    private ConfigManager() {
        System.out.println("ConfigManager Constructor");
    }
    public static ConfigManager getInstance() {
        return instance == null ? instance = new ConfigManager() : instance;
    }

    public String getSettings(String key) {
        return configs.get(key);
    }

    public void setSettings(String key, String value) {
        configs.put(key, value);
    }

    public void printSettings() {
        for (Map.Entry<String, String> entry : configs.entrySet()) {
            System.out.println(entry.getKey() + " = " + entry.getValue());
        }
    }
}
class App {
    public static void main(String[] args) {
        ConfigManager configManager = ConfigManager.getInstance();
        configManager.setSettings("19937", "Burcu");
        configManager.setSettings("19938", "Berke");
        configManager.printSettings();
    }
}
Singleton sınıfının formları:
1-) Early instantiation: Yükleme zamanında nesne yaratılır.
2-) Lazy instantiation: Bir gerekliliğe bağlı olarak nesne yaratılır.
//--------------------------------------------------------------------------


String sınıfı:
- String bir temel tür(Primitive type) değildir. 
- String türünden bir nesneye new operatörü kullanılarak atama yapılabilir. Ancak doğrudan yazı karakteri
atamak ile bunun arasında herhangi bir fark yoktur.
- String sınıfı immutable bir sınıftır.
- String C++ ta olduğu gibi == operatörü ile karşılaştırılamaz. Çünkü bu yazı içeriklerini değil bellek adreslerini karşılaştırır.
String Builder ve String Buffer sınıfları:
- Bu sınıfları String sınıfının aksine Mutable(değiştirilebilir) özellik gösterirler.
- Bu sınıfların yazı kapasitesini veren capacity fonksiyonu mevcuttur.
- Bu sınıfların String sınıfında olmayan append metotları da mevcuttur.
- Bu sınfların karakterlerin tamamını silen delete metodları da mevcuttur.
- String Buffer Thread safe iken String Builder Thread safe değildir.
Static Block
- bu block içerisinde yalnızca sınıfın static veri elemanları tanımlanabilir. 
- non-static veri elemanlarının tanımlanması durumunda error oluşur.
- static block nesne yaratımı olduğu takdirde ctordan bile önce çağrılır.
- 100 tane nesne yaratıldığında ctor 100 defa çağrılır ancak static block sadece bir kere çağrılır.
Wrapper Class
- Sarmayalan sınıflar temel türlerden gelen değerleri sarmalarlar. Bu işlemler temel türlerin tek başına 
yapamadığı içleri sarmalayan sınıf yardımıyla yapabilmesi içindir.
Abstract Anahtar Sözcüğü
- Abstract metotların gövdeleri yoktur.
- Tasarımda abstract metotlara sahip olan sınıflar her zaman bir türemiş sınıfı(Derived-Sub-Child class) mevcut olmalıdır. Ayrıca bu türemiş sınıf
